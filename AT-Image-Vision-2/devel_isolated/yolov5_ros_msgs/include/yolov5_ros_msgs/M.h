// Generated by gencpp from file yolov5_ros_msgs/M.msg
// DO NOT EDIT!


#ifndef YOLOV5_ROS_MSGS_MESSAGE_M_H
#define YOLOV5_ROS_MSGS_MESSAGE_M_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yolov5_ros_msgs
{
template <class ContainerAllocator>
struct M_
{
  typedef M_<ContainerAllocator> Type;

  M_()
    : arr1()
    , arr2()
    , arr3()
    , arr4()
    , arr5()
    , num(0)  {
    }
  M_(const ContainerAllocator& _alloc)
    : arr1(_alloc)
    , arr2(_alloc)
    , arr3(_alloc)
    , arr4(_alloc)
    , arr5(_alloc)
    , num(0)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _arr1_type;
  _arr1_type arr1;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _arr2_type;
  _arr2_type arr2;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _arr3_type;
  _arr3_type arr3;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _arr4_type;
  _arr4_type arr4;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _arr5_type;
  _arr5_type arr5;

   typedef int32_t _num_type;
  _num_type num;





  typedef boost::shared_ptr< ::yolov5_ros_msgs::M_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolov5_ros_msgs::M_<ContainerAllocator> const> ConstPtr;

}; // struct M_

typedef ::yolov5_ros_msgs::M_<std::allocator<void> > M;

typedef boost::shared_ptr< ::yolov5_ros_msgs::M > MPtr;
typedef boost::shared_ptr< ::yolov5_ros_msgs::M const> MConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolov5_ros_msgs::M_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolov5_ros_msgs::M_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolov5_ros_msgs::M_<ContainerAllocator1> & lhs, const ::yolov5_ros_msgs::M_<ContainerAllocator2> & rhs)
{
  return lhs.arr1 == rhs.arr1 &&
    lhs.arr2 == rhs.arr2 &&
    lhs.arr3 == rhs.arr3 &&
    lhs.arr4 == rhs.arr4 &&
    lhs.arr5 == rhs.arr5 &&
    lhs.num == rhs.num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolov5_ros_msgs::M_<ContainerAllocator1> & lhs, const ::yolov5_ros_msgs::M_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolov5_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yolov5_ros_msgs::M_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolov5_ros_msgs::M_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov5_ros_msgs::M_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov5_ros_msgs::M_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov5_ros_msgs::M_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov5_ros_msgs::M_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolov5_ros_msgs::M_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02c60c121c0de351ab241d16cef9d248";
  }

  static const char* value(const ::yolov5_ros_msgs::M_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02c60c121c0de351ULL;
  static const uint64_t static_value2 = 0xab241d16cef9d248ULL;
};

template<class ContainerAllocator>
struct DataType< ::yolov5_ros_msgs::M_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolov5_ros_msgs/M";
  }

  static const char* value(const ::yolov5_ros_msgs::M_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolov5_ros_msgs::M_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] arr1\n"
"int32[] arr2\n"
"int32[] arr3\n"
"int32[] arr4\n"
"int32[] arr5\n"
"int32 num\n"
;
  }

  static const char* value(const ::yolov5_ros_msgs::M_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolov5_ros_msgs::M_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arr1);
      stream.next(m.arr2);
      stream.next(m.arr3);
      stream.next(m.arr4);
      stream.next(m.arr5);
      stream.next(m.num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct M_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolov5_ros_msgs::M_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolov5_ros_msgs::M_<ContainerAllocator>& v)
  {
    s << indent << "arr1[]" << std::endl;
    for (size_t i = 0; i < v.arr1.size(); ++i)
    {
      s << indent << "  arr1[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.arr1[i]);
    }
    s << indent << "arr2[]" << std::endl;
    for (size_t i = 0; i < v.arr2.size(); ++i)
    {
      s << indent << "  arr2[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.arr2[i]);
    }
    s << indent << "arr3[]" << std::endl;
    for (size_t i = 0; i < v.arr3.size(); ++i)
    {
      s << indent << "  arr3[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.arr3[i]);
    }
    s << indent << "arr4[]" << std::endl;
    for (size_t i = 0; i < v.arr4.size(); ++i)
    {
      s << indent << "  arr4[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.arr4[i]);
    }
    s << indent << "arr5[]" << std::endl;
    for (size_t i = 0; i < v.arr5.size(); ++i)
    {
      s << indent << "  arr5[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.arr5[i]);
    }
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLOV5_ROS_MSGS_MESSAGE_M_H
